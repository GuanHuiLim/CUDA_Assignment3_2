/* Start Header *****************************************************************/

/*! \file kirsch.comp
  \author Lim Guan Hui, l.guanhui, 390009020
  \par email: l.guanhui\@digipen.edu
  \date Oct 16, 2022
  \brief Copyright (C) 2022 DigiPen Institute of Technology.
  Reproduction or disclosure of this file or its contents without the prior written consent of DigiPen Institute of Technology is prohibited. */

/* End Header *******************************************************************/
/*
* Copyright 2022 Digipen.  All rights reserved.
*
* Please refer to the end user license associated
* with this source code for terms and conditions that govern your use of
* this software. Any use, reproduction, disclosure, or distribution of
* this software and related documentation outside the terms
* is strictly prohibited.
*
*/
#version 450

layout (local_size_x = 16, local_size_y = 16) in;
layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform image2D resultImage;

const    float kirsch[8][3][3] = {
        {
         {5, 5, 5},
         {-3, 0, -3},           /*rotation 1 */
         {-3, -3, -3}
         },
        {
         {5, 5, -3},
         {5, 0, -3},            /*rotation 2 */
         {-3, -3, -3}
         },
        {
         {5, -3, -3},
         {5, 0, -3},            /*rotation 3 */
         {5, -3, -3}
         },
        {
         {-3, -3, -3},
         {5, 0, -3},            /*rotation 4 */
         {5, 5, -3}
         },
        {
         {-3, -3, -3},
         {-3, 0, -3},           /*rotation 5 */
         {5, 5, 5}
         },
        {
         {-3, -3, -3},
         {-3, 0, 5},            /*rotation 6 */
         {-3, 5, 5}
         },
        {
         {-3, -3, 5},
         {-3, 0, 5},            /*rotation 7 */
         {-3, -3, 5}
         },
        {
         {-3, 5, 5},
         {-3, 0, 5},            /*rotation 8 */
         {-3, -3, -3}
         }
    };


const int output_tile_width = 16;
const int mask_width = 3;
const int input_tile_width = output_tile_width + mask_width - 1;

shared vec3 sData[output_tile_width + 2][output_tile_width + 2];

float conv(in const float[3][3] kernel, in const vec3[3] data)
{
   float result = 0.0;
   for (int i = 0; i < 3; ++i) 
   {
        for (int j = 0; j < 3; ++j) 
        {
            result += kernel[i][j] * data[i][j];
        }
   }
   return result;
}

void main()
{
    const int width  = int(gl_WorkGroupSize.x * gl_NumWorkGroups.x);
    const int height = int(gl_WorkGroupSize.y * gl_NumWorkGroups.y);

    ivec2 global_position = ivec2(gl_GlobalInvocationID.x,gl_GlobalInvocationID.y);
    ivec2 local_position = ivec2(gl_LocalInvocationID.x,gl_LocalInvocationID.y);
    ivec2 sm_position = ivec2(local_position.x + 1,local_position.y + 1);


    //LOAD INPUT TILE
    
    //bounds check
    bool outside = true;
    if (global_position.y >= 1 && global_position.y + 1 < height 
    &&  global_position.x >= 1 && global_position.x + 1 < width)
        outside = false;
    
    vec3 ghost = vec3(0,0,0);
    {
        //load current position
        sData[local_position.x + 1][local_position.y + 1] = outside ? ghost : imageLoad(inputImage, global_position).rgb;
        
        //top side
        if (local_position.y == 0)
        {
            ivec2 position = ivec2(global_position.x,global_position.y - 1);
            sData[local_position.x + 1][local_position.y] = outside ? ghost : imageLoad(inputImage, position).rgb;
            //top left corner
            if (local_position.x == 0)
            {
                ivec2 img_position = ivec2(global_position.x - 1,global_position.y - 1);
                sData[local_position.x][local_position.y] = outside ? ghost : imageLoad(inputImage, img_position).rgb;
            }
            //top right corner
            else if (local_position.x == (gl_WorkGroupSize.x - 1))
            {
                ivec2 img_position = ivec2(global_position.x + 1,global_position.y - 1);
                sData[local_position.x + 2][local_position.y] = outside ? ghost : imageLoad(inputImage, img_position).rgb;
            }

        }
        //bottom side
        else if (local_position.y == (gl_WorkGroupSize.y - 1))
        {
            ivec2 position = ivec2(global_position.x,global_position.y + 1);
            sData[local_position.x + 1][local_position.y + 2] = outside ? ghost : imageLoad(inputImage, position).rgb;
            //bottom left corner
            if (local_position.x == 0)
            {
                ivec2 img_position = ivec2(global_position.x - 1,global_position.y + 1);
                sData[local_position.x][local_position.y + 2] = outside ? ghost : imageLoad(inputImage, img_position).rgb;
            }
            //bottom right corner
            else if (local_position.x == (gl_WorkGroupSize.x - 1))
            {
                ivec2 img_position = ivec2(global_position.x + 1,global_position.y + 1);
                sData[local_position.x + 2][local_position.y + 2] = outside ? ghost : imageLoad(inputImage, img_position).rgb;
            }
        }
        //left side
        if (local_position.x == 0)
        {
            ivec2 position = ivec2(global_position.x - 1,global_position.y);
            sData[local_position.x][local_position.y + 1] = outside ? ghost : imageLoad(inputImage, position).rgb;
        }
        //right side
        else if (local_position.x == (gl_WorkGroupSize.x - 1))
        {
            ivec2 position = ivec2(global_position.x + 1,global_position.y);
            sData[local_position.x + 2][local_position.y + 1] = outside ? ghost : imageLoad(inputImage, position).rgb;
        }
    }
    barrier();

    //PROCESS PIXEL
    vec3 maximum_sum = { 0, 0, 0 };

    //for each color channel
    for(int channel = 0; channel < 3; ++channel)
    {
        //for each surrounding pixel, we apply the mask
        for(int m = 0; m < 8; ++m)
        {
            vec3[3] mask_tile;
            for (int i = -1; i < 2; ++i) 
            {   
                for(int j = -1; j < 2; ++j) 
                {
                    mask_tile[i + 1][j + 1] = sData[sm_position.x + i][sm_position.y + j][channel];
                }
            }

            // calculate output for each color channel
            float color_output = conv(kirsch[m], mask_tile);

            // if maximum more than calculated color_output, we do nothing
            maximum_sum[channel] = maximum_sum[channel] > color_output ? maximum_sum[channel] : color_output;
        }
    }

	vec4 final_output = vec4(maximum_sum/8.0, 1.0);  

    //clamp 
    final_output.x = min(final_output.x, 255);
    final_output.y = min(final_output.y, 255);
    final_output.z = min(final_output.z, 255);
    
	imageStore(resultImage, global_position, final_output);
}
 	
 
 
 
